// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package svgbbox

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalculateBBoxClient is the client API for CalculateBBox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculateBBoxClient interface {
	GetBBox(ctx context.Context, in *Svg, opts ...grpc.CallOption) (*BBox, error)
}

type calculateBBoxClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculateBBoxClient(cc grpc.ClientConnInterface) CalculateBBoxClient {
	return &calculateBBoxClient{cc}
}

func (c *calculateBBoxClient) GetBBox(ctx context.Context, in *Svg, opts ...grpc.CallOption) (*BBox, error) {
	out := new(BBox)
	err := c.cc.Invoke(ctx, "/svgbbox.CalculateBBox/GetBBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculateBBoxServer is the server API for CalculateBBox service.
// All implementations must embed UnimplementedCalculateBBoxServer
// for forward compatibility
type CalculateBBoxServer interface {
	GetBBox(context.Context, *Svg) (*BBox, error)
	mustEmbedUnimplementedCalculateBBoxServer()
}

// UnimplementedCalculateBBoxServer must be embedded to have forward compatible implementations.
type UnimplementedCalculateBBoxServer struct {
}

func (*UnimplementedCalculateBBoxServer) GetBBox(context.Context, *Svg) (*BBox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBBox not implemented")
}
func (*UnimplementedCalculateBBoxServer) mustEmbedUnimplementedCalculateBBoxServer() {}

func RegisterCalculateBBoxServer(s *grpc.Server, srv CalculateBBoxServer) {
	s.RegisterService(&_CalculateBBox_serviceDesc, srv)
}

func _CalculateBBox_GetBBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Svg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateBBoxServer).GetBBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svgbbox.CalculateBBox/GetBBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateBBoxServer).GetBBox(ctx, req.(*Svg))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalculateBBox_serviceDesc = grpc.ServiceDesc{
	ServiceName: "svgbbox.CalculateBBox",
	HandlerType: (*CalculateBBoxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBBox",
			Handler:    _CalculateBBox_GetBBox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bbox.proto",
}
